version: '3.8'

services:
  nats:
    image: nats:latest
    ports:
      - "4222:4222"
    volumes:
      - nats-data:/data
    command: "--jetstream --store_dir=/data"
    networks:
      - app-network

  postgres:
    image: postgres:latest
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  gateway:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: sh -c "npx prisma migrate deploy --schema libs/common/prisma/schema.prisma && npm run start:dev:gateway"
    ports:
      - "3000:3000"
    volumes:
      - ./apps/gateway:/app/apps/gateway
      - ./libs:/app/libs
    env_file:
      - .env
    depends_on:
      nats:
        condition: service_started
      postgres:
        condition: service_healthy
    labels:
      - "job=gateway"
    networks:
      - app-network

  user-service:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: sh -c "npx prisma migrate deploy --schema libs/common/prisma/schema.prisma && npm run start:dev:user-service"
    volumes:
      - ./apps/user-service:/app/apps/user-service
      - ./libs:/app/libs
    env_file:
      - .env
    depends_on:
      nats:
        condition: service_started
      postgres:
        condition: service_healthy
    labels:
      - "job=user-service"
    networks:
      - app-network

  product-service:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: sh -c "npx prisma migrate deploy --schema libs/common/prisma/schema.prisma && npm run start:dev:product-service"
    volumes:
      - ./apps/product-service:/app/apps/product-service
      - ./libs:/app/libs
    env_file:
      - .env
    depends_on:
      nats:
        condition: service_started
      postgres:
        condition: service_healthy
    labels:
      - "job=product-service"
    networks:
      - app-network

  order-service:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: sh -c "npx prisma migrate deploy --schema libs/common/prisma/schema.prisma && npm run start:dev:order-service"
    volumes:
      - ./apps/order-service:/app/apps/order-service  # Mount local order-service source
      - ./libs:/app/libs
    env_file:
      - .env
    depends_on:
      nats:
        condition: service_started
      postgres:
        condition: service_healthy
    labels:
      - "job=order-service"
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000" # Changed to avoid conflict with gateway
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - loki
    networks:
      - app-network

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yml
      - loki-data:/loki
    command: "-config.file=/etc/loki/loki-config.yml"
    networks:
      - app-network

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
    command: "-config.file=/etc/promtail/config.yml"
    depends_on:
      - loki
    networks:
      - app-network

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./alert-manager.yml:/etc/alertmanager/alert-manager.yml
      - alertmanager-data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alert-manager.yml"
    networks:
      - app-network

volumes:
  nats-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  loki-data:
  alertmanager-data:

networks:
  app-network:
    driver: bridge